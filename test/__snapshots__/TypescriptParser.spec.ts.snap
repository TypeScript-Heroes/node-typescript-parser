// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`TypescriptParser Declaration parsing Classes should parse a non exported class 1`] = `
ClassDeclaration {
  "ctor": ConstructorDeclaration {
    "end": 171,
    "name": "NonExportedClass",
    "parameters": Array [
      ParameterDeclaration {
        "end": 166,
        "name": "param1",
        "start": 145,
        "type": "string",
      },
    ],
    "start": 133,
    "variables": Array [],
  },
  "end": 302,
  "isExported": false,
  "methods": Array [
    MethodDeclaration {
      "end": 203,
      "isAbstract": false,
      "name": "method1",
      "parameters": Array [],
      "start": 177,
      "type": "void",
      "variables": Array [],
      "visibility": 2,
    },
    MethodDeclaration {
      "end": 237,
      "isAbstract": false,
      "name": "method2",
      "parameters": Array [],
      "start": 208,
      "type": "void",
      "variables": Array [],
      "visibility": 1,
    },
    MethodDeclaration {
      "end": 300,
      "isAbstract": false,
      "name": "method3",
      "parameters": Array [],
      "start": 242,
      "type": "void",
      "variables": Array [
        VariableDeclaration {
          "end": 294,
          "isConst": false,
          "isExported": false,
          "name": "variable",
          "start": 276,
          "type": undefined,
        },
      ],
      "visibility": 0,
    },
  ],
  "name": "NonExportedClass",
  "properties": Array [
    PropertyDeclaration {
      "end": 166,
      "name": "param1",
      "start": 145,
      "type": "string",
      "visibility": 2,
    },
  ],
  "start": 104,
}
`;

exports[`TypescriptParser Declaration parsing Classes should parse an abstract class 1`] = `
ClassDeclaration {
  "end": 102,
  "isExported": false,
  "methods": Array [
    MethodDeclaration {
      "end": 55,
      "isAbstract": false,
      "name": "method1",
      "parameters": Array [],
      "start": 35,
      "type": undefined,
      "variables": Array [],
      "visibility": 2,
    },
    MethodDeclaration {
      "end": 100,
      "isAbstract": true,
      "name": "abstractMethod",
      "parameters": Array [],
      "start": 61,
      "type": "void",
      "variables": Array [],
      "visibility": 2,
    },
  ],
  "name": "AbstractClass",
  "properties": Array [],
  "start": 0,
}
`;

exports[`TypescriptParser Declaration parsing Classes should parse an exported class 1`] = `
ClassDeclaration {
  "end": 574,
  "isExported": true,
  "methods": Array [],
  "name": "ExportedClass",
  "properties": Array [
    PropertyDeclaration {
      "end": 363,
      "name": "_property",
      "start": 337,
      "type": "string",
      "visibility": 0,
    },
    PropertyDeclaration {
      "end": 394,
      "name": "protect",
      "start": 368,
      "type": "string",
      "visibility": 1,
    },
    PropertyDeclaration {
      "end": 418,
      "name": "pub",
      "start": 399,
      "type": "string",
      "visibility": 2,
    },
  ],
  "start": 304,
}
`;

exports[`TypescriptParser Declaration parsing Enums should parse an enum correctly 1`] = `
EnumDeclaration {
  "end": 58,
  "isExported": false,
  "members": Array [
    "Member1",
    "Member2",
    "Member3",
  ],
  "name": "Enumeration",
  "start": 0,
}
`;

exports[`TypescriptParser Declaration parsing Enums should parse an exported enum correctly 1`] = `
EnumDeclaration {
  "end": 136,
  "isExported": true,
  "members": Array [
    "ConstMember1",
    "ConstMember2",
  ],
  "name": "ConstantEnumeration",
  "start": 60,
}
`;

exports[`TypescriptParser Declaration parsing Functions should parse a function correctly 1`] = `
FunctionDeclaration {
  "end": 84,
  "isExported": false,
  "name": "function1",
  "parameters": Array [
    ParameterDeclaration {
      "end": 25,
      "name": "param1",
      "start": 19,
      "type": undefined,
    },
  ],
  "start": 0,
  "type": "string",
  "variables": Array [
    VariableDeclaration {
      "end": 61,
      "isConst": false,
      "isExported": false,
      "name": "var1",
      "start": 41,
      "type": undefined,
    },
  ],
}
`;

exports[`TypescriptParser Declaration parsing Functions should parse an exported function correctly 1`] = `
FunctionDeclaration {
  "end": 219,
  "isExported": true,
  "name": "function2",
  "parameters": Array [
    ParameterDeclaration {
      "end": 126,
      "name": "param1",
      "start": 112,
      "type": "string",
    },
    ParameterDeclaration {
      "end": 139,
      "name": "objParam1",
      "start": 130,
      "type": undefined,
    },
    ParameterDeclaration {
      "end": 150,
      "name": "objParam2",
      "start": 141,
      "type": undefined,
    },
    ParameterDeclaration {
      "end": 164,
      "name": "arrParam1",
      "start": 155,
      "type": undefined,
    },
    ParameterDeclaration {
      "end": 175,
      "name": "arrParam2",
      "start": 166,
      "type": undefined,
    },
  ],
  "start": 86,
  "type": "void",
  "variables": Array [
    VariableDeclaration {
      "end": 217,
      "isConst": true,
      "isExported": false,
      "name": "constVar1",
      "start": 190,
      "type": undefined,
    },
  ],
}
`;

exports[`TypescriptParser Declaration parsing Functions should parse parameters correctly 1`] = `
Array [
  ParameterDeclaration {
    "end": 25,
    "name": "param1",
    "start": 19,
    "type": undefined,
  },
]
`;

exports[`TypescriptParser Declaration parsing Functions should parse parameters correctly 2`] = `
Array [
  ParameterDeclaration {
    "end": 126,
    "name": "param1",
    "start": 112,
    "type": "string",
  },
  ParameterDeclaration {
    "end": 139,
    "name": "objParam1",
    "start": 130,
    "type": undefined,
  },
  ParameterDeclaration {
    "end": 150,
    "name": "objParam2",
    "start": 141,
    "type": undefined,
  },
  ParameterDeclaration {
    "end": 164,
    "name": "arrParam1",
    "start": 155,
    "type": undefined,
  },
  ParameterDeclaration {
    "end": 175,
    "name": "arrParam2",
    "start": 166,
    "type": undefined,
  },
]
`;

exports[`TypescriptParser Declaration parsing Functions should parse variables correctly 1`] = `
Array [
  VariableDeclaration {
    "end": 61,
    "isConst": false,
    "isExported": false,
    "name": "var1",
    "start": 41,
    "type": undefined,
  },
]
`;

exports[`TypescriptParser Declaration parsing Functions should parse variables correctly 2`] = `
Array [
  VariableDeclaration {
    "end": 217,
    "isConst": true,
    "isExported": false,
    "name": "constVar1",
    "start": 190,
    "type": undefined,
  },
]
`;

exports[`TypescriptParser Declaration parsing Interfaces should parse a non exported interface 1`] = `
InterfaceDeclaration {
  "end": 130,
  "isExported": false,
  "methods": Array [
    MethodDeclaration {
      "end": 93,
      "isAbstract": true,
      "name": "method1",
      "parameters": Array [],
      "start": 83,
      "type": undefined,
      "variables": Array [],
      "visibility": 2,
    },
    MethodDeclaration {
      "end": 128,
      "isAbstract": true,
      "name": "method2",
      "parameters": Array [
        ParameterDeclaration {
          "end": 120,
          "name": "param1",
          "start": 106,
          "type": "string",
        },
      ],
      "start": 98,
      "type": "void",
      "variables": Array [],
      "visibility": 2,
    },
  ],
  "name": "NonExportedInterface",
  "properties": Array [
    PropertyDeclaration {
      "end": 55,
      "name": "property1",
      "start": 37,
      "type": "string",
      "visibility": 2,
    },
    PropertyDeclaration {
      "end": 78,
      "name": "property2",
      "start": 60,
      "type": "number",
      "visibility": 2,
    },
  ],
  "start": 0,
}
`;

exports[`TypescriptParser Declaration parsing Interfaces should parse an exported interface 1`] = `
InterfaceDeclaration {
  "end": 286,
  "isExported": true,
  "methods": Array [
    MethodDeclaration {
      "end": 247,
      "isAbstract": true,
      "name": "method1",
      "parameters": Array [
        ParameterDeclaration {
          "end": 235,
          "name": "param1",
          "start": 229,
          "type": undefined,
        },
        ParameterDeclaration {
          "end": 243,
          "name": "param2",
          "start": 237,
          "type": undefined,
        },
      ],
      "start": 219,
      "type": undefined,
      "variables": Array [],
      "visibility": 2,
    },
    MethodDeclaration {
      "end": 284,
      "isAbstract": true,
      "name": "method2",
      "parameters": Array [
        ParameterDeclaration {
          "end": 267,
          "name": "param1",
          "start": 261,
          "type": undefined,
        },
        ParameterDeclaration {
          "end": 275,
          "name": "param2",
          "start": 269,
          "type": undefined,
        },
      ],
      "start": 252,
      "type": "void",
      "variables": Array [],
      "visibility": 2,
    },
  ],
  "name": "ExportedInterface",
  "properties": Array [
    PropertyDeclaration {
      "end": 191,
      "name": "property1",
      "start": 173,
      "type": "string",
      "visibility": 2,
    },
    PropertyDeclaration {
      "end": 214,
      "name": "property2",
      "start": 196,
      "type": "number",
      "visibility": 2,
    },
  ],
  "start": 132,
}
`;

exports[`TypescriptParser Declaration parsing Modules should parse a module 1`] = `
Module {
  "declarations": Array [
    FunctionDeclaration {
      "end": 62,
      "isExported": true,
      "name": "modFunc",
      "parameters": Array [],
      "start": 30,
      "type": "void",
      "variables": Array [],
    },
  ],
  "end": 64,
  "exports": Array [],
  "imports": Array [],
  "name": "Module",
  "resources": Array [],
  "start": 0,
  "usages": Array [],
}
`;

exports[`TypescriptParser Declaration parsing Modules should parse a namespace 1`] = `
Namespace {
  "declarations": Array [
    ClassDeclaration {
      "end": 121,
      "isExported": false,
      "methods": Array [],
      "name": "NotExported",
      "properties": Array [],
      "start": 100,
    },
    EnumDeclaration {
      "end": 188,
      "isExported": true,
      "members": Array [
        "MemberA",
        "MemberB",
      ],
      "name": "Exported",
      "start": 127,
    },
  ],
  "end": 190,
  "exports": Array [],
  "imports": Array [],
  "name": "Namespace",
  "resources": Array [],
  "start": 66,
  "usages": Array [
    "Namespace",
    "MemberA",
    "MemberB",
  ],
}
`;

exports[`TypescriptParser Declaration parsing Type aliases should parse a type alias correctly 1`] = `
TypeAliasDeclaration {
  "end": 16,
  "isExported": false,
  "name": "Alias",
  "start": 0,
}
`;

exports[`TypescriptParser Declaration parsing Type aliases should parse an exported type alias correctly 1`] = `
TypeAliasDeclaration {
  "end": 49,
  "isExported": true,
  "name": "ExportedAlias",
  "start": 18,
}
`;

exports[`TypescriptParser Declaration parsing Variables should parse a non exported const 1`] = `
VariableDeclaration {
  "end": 59,
  "isConst": true,
  "isExported": false,
  "name": "NonExportedConst",
  "start": 31,
  "type": undefined,
}
`;

exports[`TypescriptParser Declaration parsing Variables should parse a non exported variable 1`] = `
VariableDeclaration {
  "end": 29,
  "isConst": false,
  "isExported": false,
  "name": "NonExportedVariable",
  "start": 0,
  "type": undefined,
}
`;

exports[`TypescriptParser Declaration parsing Variables should parse an exported const 1`] = `
VariableDeclaration {
  "end": 128,
  "isConst": true,
  "isExported": true,
  "name": "ExportedConst",
  "start": 96,
  "type": undefined,
}
`;

exports[`TypescriptParser Declaration parsing Variables should parse an exported multiline variable 1`] = `
VariableDeclaration {
  "end": 206,
  "isConst": false,
  "isExported": true,
  "name": "MultiLet1",
  "start": 160,
  "type": undefined,
}
`;

exports[`TypescriptParser Declaration parsing Variables should parse an exported multiline variable 2`] = `
VariableDeclaration {
  "end": 206,
  "isConst": false,
  "isExported": true,
  "name": "MultiLet2",
  "start": 160,
  "type": undefined,
}
`;

exports[`TypescriptParser Declaration parsing Variables should parse an exported scope variable 1`] = `
VariableDeclaration {
  "end": 158,
  "isConst": false,
  "isExported": true,
  "name": "ExportedLet",
  "start": 130,
  "type": undefined,
}
`;

exports[`TypescriptParser Declaration parsing Variables should parse an exported variable 1`] = `
VariableDeclaration {
  "end": 94,
  "isConst": false,
  "isExported": true,
  "name": "ExportedVariable",
  "start": 61,
  "type": undefined,
}
`;

exports[`TypescriptParser Export parsing should parse aliased export named from another file 1`] = `
SymbolSpecifier {
  "alias": "Alias",
  "specifier": "Specifier",
}
`;

exports[`TypescriptParser Export parsing should parse default export 1`] = `
DefaultDeclaration {
  "end": undefined,
  "isExported": true,
  "name": "DefaultExport",
  "resource": File {
    "declarations": Array [
      [Circular],
    ],
    "end": 139,
    "exports": Array [
      AllExport {
        "end": 28,
        "from": "./OtherFile",
        "start": 0,
      },
      NamedExport {
        "end": 90,
        "from": "./AnotherFile",
        "specifiers": Array [
          SymbolSpecifier {
            "alias": undefined,
            "specifier": "Specifier",
          },
          SymbolSpecifier {
            "alias": "Alias",
            "specifier": "Specifier",
          },
        ],
        "start": 30,
      },
      AssignedExport {
        "declarationIdentifier": "Foo",
        "end": 105,
        "resource": [Circular],
        "start": 92,
      },
    ],
    "imports": Array [],
    "resources": Array [],
    "start": 0,
    "usages": Array [
      "Foo",
    ],
  },
  "start": undefined,
}
`;

exports[`TypescriptParser Export parsing should parse export all from another file 1`] = `
AllExport {
  "end": 28,
  "from": "./OtherFile",
  "start": 0,
}
`;

exports[`TypescriptParser Export parsing should parse export assignment 1`] = `
AssignedExport {
  "declarationIdentifier": "Foo",
  "end": 105,
  "resource": File {
    "declarations": Array [
      DefaultDeclaration {
        "end": undefined,
        "isExported": true,
        "name": "DefaultExport",
        "resource": [Circular],
        "start": undefined,
      },
    ],
    "end": 139,
    "exports": Array [
      AllExport {
        "end": 28,
        "from": "./OtherFile",
        "start": 0,
      },
      NamedExport {
        "end": 90,
        "from": "./AnotherFile",
        "specifiers": Array [
          SymbolSpecifier {
            "alias": undefined,
            "specifier": "Specifier",
          },
          SymbolSpecifier {
            "alias": "Alias",
            "specifier": "Specifier",
          },
        ],
        "start": 30,
      },
      [Circular],
    ],
    "imports": Array [],
    "resources": Array [],
    "start": 0,
    "usages": Array [
      "Foo",
    ],
  },
  "start": 92,
}
`;

exports[`TypescriptParser Export parsing should parse export named from another file 1`] = `
NamedExport {
  "end": 90,
  "from": "./AnotherFile",
  "specifiers": Array [
    SymbolSpecifier {
      "alias": undefined,
      "specifier": "Specifier",
    },
    SymbolSpecifier {
      "alias": "Alias",
      "specifier": "Specifier",
    },
  ],
  "start": 30,
}
`;

exports[`TypescriptParser Import parsing should parse a default import 1`] = `
DefaultImport {
  "alias": "Foobar",
  "end": 328,
  "libraryName": "aFile",
  "start": 301,
}
`;

exports[`TypescriptParser Import parsing should parse a multiline import 1`] = `
NamedImport {
  "end": 300,
  "libraryName": "multiLineImport",
  "specifiers": Array [
    SymbolSpecifier {
      "alias": undefined,
      "specifier": "Spec1",
    },
    SymbolSpecifier {
      "alias": "Alias2",
      "specifier": "Spec2",
    },
  ],
  "start": 235,
}
`;

exports[`TypescriptParser Import parsing should parse external module import 1`] = `
ExternalModuleImport {
  "alias": "external",
  "end": 234,
  "libraryName": "externalModule",
  "start": 190,
}
`;

exports[`TypescriptParser Import parsing should parse imports 1`] = `
Array [
  StringImport {
    "end": 22,
    "libraryName": "stringImport",
    "start": 0,
  },
  NamedImport {
    "end": 86,
    "libraryName": "namedImport",
    "specifiers": Array [
      SymbolSpecifier {
        "alias": undefined,
        "specifier": "Specifier1",
      },
      SymbolSpecifier {
        "alias": undefined,
        "specifier": "Specifier2",
      },
      SymbolSpecifier {
        "alias": undefined,
        "specifier": "Specifier3",
      },
    ],
    "start": 23,
  },
  NamedImport {
    "end": 143,
    "libraryName": "namedAliasedImport",
    "specifiers": Array [
      SymbolSpecifier {
        "alias": "Alias1",
        "specifier": "Specifier1",
      },
    ],
    "start": 87,
  },
  NamespaceImport {
    "alias": "namespaceImport",
    "end": 189,
    "libraryName": "namespace",
    "start": 144,
  },
  ExternalModuleImport {
    "alias": "external",
    "end": 234,
    "libraryName": "externalModule",
    "start": 190,
  },
  NamedImport {
    "end": 300,
    "libraryName": "multiLineImport",
    "specifiers": Array [
      SymbolSpecifier {
        "alias": undefined,
        "specifier": "Spec1",
      },
      SymbolSpecifier {
        "alias": "Alias2",
        "specifier": "Spec2",
      },
    ],
    "start": 235,
  },
  DefaultImport {
    "alias": "Foobar",
    "end": 328,
    "libraryName": "aFile",
    "start": 301,
  },
]
`;

exports[`TypescriptParser Import parsing should parse named import 1`] = `
NamedImport {
  "end": 86,
  "libraryName": "namedImport",
  "specifiers": Array [
    SymbolSpecifier {
      "alias": undefined,
      "specifier": "Specifier1",
    },
    SymbolSpecifier {
      "alias": undefined,
      "specifier": "Specifier2",
    },
    SymbolSpecifier {
      "alias": undefined,
      "specifier": "Specifier3",
    },
  ],
  "start": 23,
}
`;

exports[`TypescriptParser Import parsing should parse named import with aliased specifier 1`] = `
NamedImport {
  "end": 143,
  "libraryName": "namedAliasedImport",
  "specifiers": Array [
    SymbolSpecifier {
      "alias": "Alias1",
      "specifier": "Specifier1",
    },
  ],
  "start": 87,
}
`;

exports[`TypescriptParser Import parsing should parse namespace import 1`] = `
NamespaceImport {
  "alias": "namespaceImport",
  "end": 189,
  "libraryName": "namespace",
  "start": 144,
}
`;

exports[`TypescriptParser Import parsing should parse string import 1`] = `
StringImport {
  "end": 22,
  "libraryName": "stringImport",
  "start": 0,
}
`;

exports[`TypescriptParser Source parsing should parse a source code string correctly 1`] = `
File {
  "declarations": Array [
    ClassDeclaration {
      "end": 40,
      "isExported": false,
      "methods": Array [],
      "name": "Foobar",
      "properties": Array [],
      "start": 25,
    },
    VariableDeclaration {
      "end": 67,
      "isConst": true,
      "isExported": false,
      "name": "bar",
      "start": 42,
      "type": undefined,
    },
  ],
  "end": 67,
  "exports": Array [],
  "filePath": "inline.ts",
  "imports": Array [
    NamedImport {
      "end": 24,
      "libraryName": "bar",
      "specifiers": Array [
        SymbolSpecifier {
          "alias": undefined,
          "specifier": "foo",
        },
      ],
      "start": 0,
    },
  ],
  "resources": Array [],
  "rootPath": "/",
  "start": 0,
  "usages": Array [
    "bar",
    "Foobar",
  ],
}
`;
